WEBVTT

00:00:02.906 --> 00:00:03.576 align:middle
¡Hola amigos!

00:00:03.876 --> 00:00:08.196 align:middle
Gracias por pasar el rato y
concederme el privilegio de guiarnos a

00:00:08.196 --> 00:00:11.976 align:middle
través de algunas cosas divertidas
y frikis, pero también útiles.

00:00:12.386 --> 00:00:14.436 align:middle
Estamos hablando de patrones de diseño.

00:00:15.046 --> 00:00:18.836 align:middle
La idea es sencilla: Los mismos
problemas a los que nos enfrentamos

00:00:18.836 --> 00:00:23.346 align:middle
en nuestro código cada día se han
enfrentado un millón de veces antes.

00:00:23.846 --> 00:00:30.826 align:middle
Y a menudo, ya se ha perfeccionado una forma
o "estrategia" para resolver ese problema.

00:00:31.276 --> 00:00:33.376 align:middle
Esto se llama "patrones de diseño".

00:00:34.086 --> 00:00:37.986 align:middle
Un patrón de diseño no es más que
una "estrategia" para escribir código

00:00:38.156 --> 00:00:40.256 align:middle
cuando te encuentras con un problema concreto.

00:00:40.976 --> 00:00:46.686 align:middle
Si puedes empezar a identificar qué tipos de
problemas se resuelven con qué estrategias, entrarás

00:00:47.206 --> 00:00:50.646 align:middle
en situaciones y sabrás
inmediatamente qué hacer.

00:00:51.476 --> 00:00:57.516 align:middle
Aprender patrones de diseño te proporciona A) Más herramientas
en tu caja de herramientas de desarrollador al codificar

00:00:58.086 --> 00:01:03.216 align:middle
y B) Una mejor comprensión de las
bibliotecas básicas como Symfony,

00:01:03.646 --> 00:01:06.556 align:middle
que aprovecha mucho los patrones de diseño.

00:01:07.246 --> 00:01:10.656 align:middle
También te hará más
divertido en las fiestas...

00:01:10.966 --> 00:01:14.026 align:middle
suponiendo que los únicos asistentes
a la fiesta sean programadores...

00:01:14.416 --> 00:01:20.476 align:middle
porque podrás decir inteligentemente cosas como
Sí, me he dado cuenta de que has refactorizado

00:01:20.476 --> 00:01:25.176 align:middle
para utilizar el patrón decorador:
gran idea para ampliar esa clase

00:01:25.406 --> 00:01:28.626 align:middle
sin violar el principio
de responsabilidad única.

00:01:29.156 --> 00:01:31.426 align:middle
Caramba, vamos a ser súper populares.

00:01:32.746 --> 00:01:35.426 align:middle
Vale, hay montones de patrones de diseño.

00:01:35.986 --> 00:01:40.916 align:middle
Aunque... es probable que sólo un pequeño
número nos sea útil en el mundo real:

00:01:41.546 --> 00:01:44.906 align:middle
simplemente no nos enfrentaremos nunca
a los problemas que los otros resuelven.

00:01:45.886 --> 00:01:49.846 align:middle
Estos numerosos patrones de diseño
se dividen en tres grupos básicos.

00:01:50.446 --> 00:01:52.256 align:middle
No es necesario que los memorices...

00:01:52.546 --> 00:01:57.716 align:middle
sólo es una buena manera de pensar en los tres tipos
de problemas que resuelven los patrones de diseño.

00:01:58.706 --> 00:02:01.876 align:middle
El primer tipo se denomina
"patrones de creación ",

00:02:02.256 --> 00:02:05.976 align:middle
y consisten en ayudar a instanciar objetos.

00:02:06.676 --> 00:02:11.546 align:middle
Incluyen el patrón de fábrica, el patrón
constructor, el patrón singleton y otros.

00:02:12.376 --> 00:02:15.276 align:middle
El segundo tipo se llama "patrones
estructurales". Estos te ayudan a

00:02:15.916 --> 00:02:20.816 align:middle
organizar las cosas cuando tienes
un montón de objetos y necesitas

00:02:20.816 --> 00:02:23.856 align:middle
identificar las relaciones entre ellos.

00:02:24.476 --> 00:02:28.596 align:middle
Un ejemplo de relación sería
la relación padre-hijo,

00:02:29.096 --> 00:02:30.726 align:middle
pero hay muchas otras.

00:02:31.646 --> 00:02:34.526 align:middle
Sí, lo sé: esto puede ser un poco confuso.

00:02:34.986 --> 00:02:40.326 align:middle
Pero veremos un patrón estructural en
este tutorial: el "patrón decorador".

00:02:41.176 --> 00:02:46.986 align:middle
El tercer y último tipo de patrones se denomina "patrones
de comportamiento", que ayudan a resolver problemas

00:02:46.986 --> 00:02:49.656 align:middle
sobre cómo se comunican los
objetos entre sí, así como a

00:02:50.076 --> 00:02:54.436 align:middle
asignar responsabilidades entre los objetos. Es

00:02:55.106 --> 00:03:00.136 align:middle
una forma elegante de decir que los patrones
de comportamiento te ayudan a diseñar clases

00:03:00.136 --> 00:03:05.026 align:middle
con responsabilidades específicas
que luego pueden trabajar juntas...

00:03:05.636 --> 00:03:09.906 align:middle
en lugar de poner todo ese
código en una clase gigante.

00:03:10.646 --> 00:03:16.826 align:middle
Hablaremos de dos patrones de comportamiento: el
"patrón de estrategia" y el "patrón de observador".

00:03:17.676 --> 00:03:23.146 align:middle
Ahora que hemos definido algo de lo que
vamos a ver, ¡es hora de ponerse técnicos!

00:03:23.916 --> 00:03:28.786 align:middle
Vamos a utilizar estos patrones en un proyecto
real de Symfony para hacer cosas reales.

00:03:29.646 --> 00:03:36.016 align:middle
Sólo cubriremos algunos patrones en este tutorial
- algunos de mis favoritos - pero si terminas

00:03:36.016 --> 00:03:38.006 align:middle
y quieres ver más, ¡háznoslo saber!

00:03:38.986 --> 00:03:44.256 align:middle
Muy bien, para ser el mejor
diseñador de patrones que puedas ser,

00:03:44.676 --> 00:03:49.226 align:middle
definitivamente deberías descargar el código del
curso desde esta página y codificar junto a mí.

00:03:49.906 --> 00:03:53.086 align:middle
Después de descomprimirlo,
encontrarás un directorio start/

00:03:53.176 --> 00:03:55.086 align:middle
que tiene el mismo código que ves aquí.

00:03:55.756 --> 00:03:59.546 align:middle
Abre este archivo README.md para ver
todos los detalles de la configuración.

00:04:00.086 --> 00:04:02.926 align:middle
Sin embargo, esto es bastante
fácil: sólo tienes que ejecutar:

00:04:03.016 --> 00:04:08.486 align:middle
composer install Nuestra aplicación es un
simple juego de rol en línea de comandos

00:04:08.806 --> 00:04:11.736 align:middle
en el que los personajes luchan
entre sí y suben de nivel.

00:04:12.296 --> 00:04:17.056 align:middle
Los juegos de rol son mi tipo de juego
favorito: ¡Shining Force for the win!

00:04:17.736 --> 00:04:18.856 align:middle
Para jugar, ejecuta: ./bin/console

00:04:18.956 --> 00:04:22.526 align:middle
app:game:play ¡Genial! ¡

00:04:22.786 --> 00:04:24.456 align:middle
Tenemos tres tipos de personajes! Seamos

00:04:24.846 --> 00:04:26.186 align:middle
un luchador. Vamos a

00:04:26.846 --> 00:04:28.626 align:middle
luchar contra otro luchador. ¡ Pon en cola

00:04:28.996 --> 00:04:30.626 align:middle
los sonidos de la batalla épica! Y...

00:04:31.216 --> 00:04:33.126 align:middle
¡ganamos!

00:04:33.746 --> 00:04:37.266 align:middle
Hubo 11 rondas de lucha, 94
puntos de daño repartidos, 84

00:04:37.526 --> 00:04:41.956 align:middle
puntos de daño recibidos y
¡¡¡gloria para todos! !!

00:04:42.636 --> 00:04:44.116 align:middle
También podemos volver a luchar. Y...

00:04:44.756 --> 00:04:46.816 align:middle
¡woohoo! ¡ Estamos en racha

00:04:47.056 --> 00:04:48.516 align:middle
! Esta

00:04:49.346 --> 00:04:53.206 align:middle
es una aplicación Symfony, pero una
aplicación Symfony muy sencilla.

00:04:55.336 --> 00:04:59.246 align:middle
Tiene una clase de comando que configura
las cosas e imprime los resultados.

00:04:59.866 --> 00:05:03.316 align:middle
Le dices qué personaje quieres
ser y comienza la batalla. Pero la

00:05:04.046 --> 00:05:10.626 align:middle
mayor parte del trabajo se realiza a través de la
propiedad game, que es esta clase GameApplication. Esta

00:05:11.276 --> 00:05:15.626 align:middle
toma estos dos objetos Character y pasa
por la lógica de hacer que se "ataquen "

00:05:15.716 --> 00:05:18.666 align:middle
entre sí hasta que uno de ellos gane. En

00:05:19.526 --> 00:05:22.976 align:middle
la parte inferior, también contiene
los tres tipos de personajes, que

00:05:23.386 --> 00:05:25.856 align:middle
están representados por esta clase Character.

00:05:26.616 --> 00:05:30.396 align:middle
Puedes pasar diferentes estadísticas
para tu personaje, como $maxHealth, el

00:05:30.396 --> 00:05:33.946 align:middle
$baseDamage que haces, y diferentes
niveles de $armor. Así que

00:05:34.786 --> 00:05:38.446 align:middle
GameApplication define los tres
tipos de personajes aquí abajo... y

00:05:39.036 --> 00:05:41.026 align:middle
los combate arriba. ¡ Eso es

00:05:41.786 --> 00:05:43.326 align:middle
básicamente todo! Lo siguiente: vamos a

00:05:44.306 --> 00:05:48.886 align:middle
sumergirnos en nuestro primer patrón,
el "patrón de estrategia", en el que

00:05:49.246 --> 00:05:53.376 align:middle
permitimos que algunos personajes
lancen hechizos mágicos. Para

00:05:54.146 --> 00:05:59.916 align:middle
hacerlo posible, vamos a tener que hacer que
la clase Character sea mucho más flexible
