WEBVTT

00:00:01.066 --> 00:00:04.006 align:middle
¡Hemos implementado el patrón observador!

00:00:04.436 --> 00:00:09.986 align:middle
El GameApplication es nuestro sujeto,
que notifica a todos los observadores...

00:00:10.186 --> 00:00:14.356 align:middle
y de momento tenemos uno: XpEarnedObserver.

00:00:15.026 --> 00:00:18.036 align:middle
Dentro de GameCommand, conectamos todo esto

00:00:18.036 --> 00:00:22.506 align:middle
instanciando manualmente el
observador y XpCalculator...

00:00:22.836 --> 00:00:25.406 align:middle
y luego llamando a
$this->game->subscribe():

00:00:25.886 --> 00:00:28.666 align:middle
Pero... eso no es muy propio de Symfony.

00:00:29.046 --> 00:00:34.456 align:middle
Tanto XpEarnedObserver como
XpCalculator son servicios.

00:00:34.946 --> 00:00:41.096 align:middle
Así que normalmente los autocablearíamos desde
el contenedor, no los instanciaríamos manualmente.

00:00:41.846 --> 00:00:44.456 align:middle
Estamos autocableando GameApplication...

00:00:44.566 --> 00:00:47.706 align:middle
pero nuestra situación general
no es del todo correcta. En

00:00:48.466 --> 00:00:54.166 align:middle
un mundo perfecto, en el momento en que
Symfony nos da este GameApplication,

00:00:54.346 --> 00:01:00.326 align:middle
el contenedor de Symfony ya habría conectado
todos sus observadores para que estuviera

00:01:00.476 --> 00:01:02.976 align:middle
listo para ser utilizado inmediatamente.

00:01:03.786 --> 00:01:04.796 align:middle
¿Cómo podemos hacerlo?

00:01:05.336 --> 00:01:07.356 align:middle
Hagámoslo primero de forma sencilla.

00:01:08.086 --> 00:01:11.036 align:middle
Elimina todo el código
manual dentro de GameCommand:

00:01:11.716 --> 00:01:14.326 align:middle
Vamos a recrear esta misma configuración...

00:01:14.696 --> 00:01:16.826 align:middle
pero dentro de services.yaml.

00:01:17.836 --> 00:01:18.476 align:middle
Abre eso...

00:01:18.836 --> 00:01:23.856 align:middle
y en la parte inferior, tenemos que
modificar el servicio App\GameApplication.

00:01:24.416 --> 00:01:27.016 align:middle
Pero no necesitamos
configurar ningún argumento.

00:01:27.256 --> 00:01:31.106 align:middle
En este caso, necesitamos
configurar algunos calls.

00:01:31.776 --> 00:01:34.806 align:middle
Aquí, básicamente le estoy
diciendo a Symfony ¡Oye!

00:01:35.126 --> 00:01:41.566 align:middle
Después de instanciar GameApplication,
llama al método subscribe() en él y pasa,

00:01:41.846 --> 00:01:47.666 align:middle
como argumento, el servicio
@App\Observer\XpEarnedObserver.

00:01:48.316 --> 00:01:54.476 align:middle
Así que cuando autocableemos GameApplication,
Symfony irá a buscar el servicio XpEarnedObserver

00:01:54.636 --> 00:02:01.376 align:middle
y ese servicio, por supuesto, tendrá
XpCalculator autocableado en él.

00:02:02.246 --> 00:02:06.966 align:middle
Esto es un autocableado bastante
normal: la única parte especial es

00:02:06.966 --> 00:02:09.646 align:middle
que ahora Symfony llamará
al método subscribe()

00:02:09.646 --> 00:02:14.696 align:middle
en GameApplication antes de
pasar ese objeto a GameCommand.

00:02:15.426 --> 00:02:18.156 align:middle
En otras palabras, esto debería funcionar.

00:02:18.536 --> 00:02:19.226 align:middle
¡Vamos a probarlo!

00:02:19.716 --> 00:02:26.216 align:middle
Ejecuta: ./bin/console app:game:play
De momento no hay errores y...

00:02:26.686 --> 00:02:27.506 align:middle
oh. Hemos perdido.

00:02:27.506 --> 00:02:29.506 align:middle
Mala suerte. ¡Volvamos a intentarlo!

00:02:30.496 --> 00:02:34.366 align:middle
Ganamos y recibimos 30 XP.

00:02:34.366 --> 00:02:35.466 align:middle
¡Ya funciona!

00:02:36.286 --> 00:02:41.876 align:middle
El inconveniente de esta solución es que
cada vez que añadamos un nuevo observador,

00:02:42.026 --> 00:02:46.806 align:middle
tendremos que ir a services.yaml
y cablearlo manualmente.

00:02:47.236 --> 00:02:49.606 align:middle
Qué indigno...

00:02:50.226 --> 00:02:56.236 align:middle
¿Podríamos suscribir automáticamente todos los
servicios que implementen GameObserverInterface?

00:02:56.716 --> 00:02:59.776 align:middle
¡Pues sí! ¡Y qué excelente idea!

00:03:00.466 --> 00:03:02.296 align:middle
Podemos hacerlo en dos pasos.

00:03:02.756 --> 00:03:04.906 align:middle
Primero, abre src/Kernel.php. No es

00:03:04.906 --> 00:03:11.866 align:middle
un archivo con el que trabajemos mucho, pero estamos
a punto de hacer algunas cosas más profundas

00:03:11.866 --> 00:03:16.016 align:middle
con el contenedor y, por tanto, es
exactamente donde queremos estar.

00:03:16.796 --> 00:03:20.966 align:middle
Ve a Generar Código o Command+O y
selecciona "Anular Métodos". Vamos a anular

00:03:21.206 --> 00:03:22.916 align:middle
uno llamado build(): ¡Perfecto! El

00:03:24.216 --> 00:03:28.716 align:middle
método padre está vacío, así que no
necesitamos llamarlo. En su lugar, di

00:03:29.446 --> 00:03:33.986 align:middle
$container->registerForAutoconfiguration(),
pásale

00:03:34.326 --> 00:03:40.256 align:middle
GameObserverInterface::class,
y luego di ->addTag(). Voy a

00:03:40.456 --> 00:03:45.396 align:middle
inventar una nueva etiqueta aquí llamada
game.observer: Probablemente no sea

00:03:46.386 --> 00:03:51.616 align:middle
algo que veas muy a menudo (o
nunca) en tu código, pero es

00:03:51.866 --> 00:03:54.656 align:middle
muy común en los bundles
de terceros. Esto dice

00:03:55.496 --> 00:04:01.126 align:middle
que cualquier servicio que implemente GameObserverInterface
debe recibir automáticamente esta etiqueta

00:04:01.126 --> 00:04:04.086 align:middle
game.observer... suponiendo que ese

00:04:04.516 --> 00:04:09.856 align:middle
servicio tenga habilitado autoconfigure,
cosa que hacen todos nuestros servicios. Ese

00:04:10.556 --> 00:04:13.146 align:middle
nombre de etiqueta podría
ser cualquier cadena... y no

00:04:13.386 --> 00:04:16.366 align:middle
hace nada por el momento: es sólo

00:04:16.596 --> 00:04:20.766 align:middle
una cadena aleatoria que ahora
está unida a nuestro servicio. Pero

00:04:21.326 --> 00:04:24.316 align:middle
, al menos, deberíamos poder verlo. Gira

00:04:25.116 --> 00:04:26.266 align:middle
y ejecuta: ./bin/console
debug:container xpearnedobserver

00:04:26.356 --> 00:04:33.276 align:middle
¡Ha encontrado nuestro
servicio! Y compr uébalo

00:04:33.976 --> 00:04:36.966 align:middle
: Tags - game.observer. Bien, ahora

00:04:37.886 --> 00:04:42.476 align:middle
que nuestro servicio tiene una etiqueta, vamos a escribir
un poco más de código que llame automáticamente

00:04:42.476 --> 00:04:49.676 align:middle
al método subscribe en GameApplication
para cada servicio con esa etiqueta. Esto

00:04:50.386 --> 00:04:54.516 align:middle
también va a ir en Kernel, pero en un
método diferente. En este caso, vamos a

00:04:55.036 --> 00:04:59.466 align:middle
implementar algo llamado "pase
del compilador". Añade una

00:04:59.986 --> 00:05:03.166 align:middle
nueva interfaz llamada
CompilerPassInterface. Luego, abajo,

00:05:03.726 --> 00:05:09.806 align:middle
vuelve a "Generar código", "Implementar métodos",
y selecciona process() : Los pases de compilador

00:05:10.856 --> 00:05:14.976 align:middle
son un poco más avanzados,
¡pero súper chulos! Es un

00:05:15.496 --> 00:05:22.276 align:middle
trozo de código que se ejecuta al final del contenedor
y de los servicios que se están construyendo... y

00:05:22.706 --> 00:05:25.656 align:middle
puedes hacer lo que quieras
dentro. ¡ Compruébalo

00:05:26.306 --> 00:05:26.776 align:middle
! Di $definition

00:05:26.936 --> 00:05:33.736 align:middle
= $container->findDefinition(GameApplication::class)
: No , esto

00:05:34.606 --> 00:05:38.706 align:middle
no devuelve el objeto
GameApplication. Devuelve un objeto

00:05:39.056 --> 00:05:44.476 align:middle
Definition que sabe todo
sobre cómo instanciar un

00:05:44.476 --> 00:05:49.706 align:middle
GameApplication, como su clase, los
argumentos del constructor y las llamadas que

00:05:49.906 --> 00:05:52.286 align:middle
pueda tener. A continuación,
digamos $taggedObservers

00:05:53.196 --> 00:06:01.246 align:middle
= $container->findTaggedServiceIds('game.observer')
: Esto devolverá un

00:06:02.556 --> 00:06:08.666 align:middle
array de todos los servicios que tengan la etiqueta
game.observer. Entonces podemos hacer un bucle

00:06:09.436 --> 00:06:16.296 align:middle
sobre ellos con foreach ($taggedObservers
as $id => $tags). El $id es el

00:06:17.636 --> 00:06:19.796 align:middle
identificador del servicio...
y el $tags es un array

00:06:19.996 --> 00:06:24.976 align:middle
porque técnicamente puedes poner la
misma etiqueta en un servicio varias

00:06:24.976 --> 00:06:26.686 align:middle
veces... pero eso no

00:06:26.786 --> 00:06:28.706 align:middle
nos importa: Ahora digamos que
$definition->addMethodCall(), que

00:06:29.516 --> 00:06:36.586 align:middle
es la versión PHP de calls en
YAML. Pásale el método subscribe

00:06:37.736 --> 00:06:43.536 align:middle
y, como argumentos, un new Reference()
(el de DependencyInjection), con id:

00:06:43.566 --> 00:06:45.986 align:middle
Esta es una forma elegante

00:06:46.886 --> 00:06:51.436 align:middle
de decir que queremos que se
llame al método subscribe() en

00:06:51.436 --> 00:06:53.456 align:middle
GameApplication... y que se

00:06:53.826 --> 00:06:58.516 align:middle
le pase el servicio que contiene la etiqueta
game.observer. El resultado final es el mismo

00:06:59.436 --> 00:07:04.126 align:middle
que teníamos antes en services.yaml...
sólo que más dinámico y

00:07:04.566 --> 00:07:09.546 align:middle
mejor para impresionar a tus amigos
programadores. Así que, elimina todo

00:07:09.866 --> 00:07:12.496 align:middle
el código YAML que hemos añadido:
Si volvemos a probar nuestro juego...

00:07:13.566 --> 00:07:15.246 align:middle
./bin/console app:game:play ¡No hay errores!

00:07:15.816 --> 00:07:19.046 align:middle
Y... ¡sí! ¡ Sigue

00:07:19.416 --> 00:07:21.856 align:middle
funcionando! Si

00:07:24.176 --> 00:07:29.116 align:middle
más adelante necesitamos añadir otro observador, sólo tenemos
que crear una clase, hacer que implemente GameObserverInterface

00:07:29.386 --> 00:07:32.926 align:middle
y... ¡listo! Se suscribirá automáticamente

00:07:33.126 --> 00:07:37.496 align:middle
a GameApplication. Ése es el

00:07:38.186 --> 00:07:41.026 align:middle
patrón del observador. Su aspecto puede ser

00:07:41.366 --> 00:07:46.266 align:middle
diferente, con distintos nombres de métodos para
la suscripción. A veces, los observ adores se

00:07:46.786 --> 00:07:51.206 align:middle
pasan a través del constructor Pero la idea es

00:07:51.886 --> 00:07:58.246 align:middle
siempre la misma: un objeto central hace un
bucle y llama a un método en una colección de

00:07:58.246 --> 00:08:01.716 align:middle
otros objetos cuando
ocurre algo. ¿Dónde vemos

00:08:02.546 --> 00:08:04.706 align:middle
esto en la naturaleza? Aparece en

00:08:05.036 --> 00:08:08.356 align:middle
muchos sitios, pero aquí tienes un
ejemplo. En la página GitHub de Symfony

00:08:08.906 --> 00:08:12.956 align:middle
, voy a pulsar "T" y buscar una clase llamada

00:08:12.956 --> 00:08:15.436 align:middle
LocaleSwitcher. Si necesitas

00:08:16.456 --> 00:08:21.406 align:middle
hacer algo en tu aplicación cada vez que cambie
la configuración regional, puedes registrar tu

00:08:21.726 --> 00:08:26.156 align:middle
código en LocaleSwitcher y
te llamará. En este caso, los

00:08:26.896 --> 00:08:30.456 align:middle
observadores se pasan a través
del constructor. Y luego puedes

00:08:31.026 --> 00:08:35.096 align:middle
ver aquí abajo, después de que se establezca la
configuración regional, hace un bucle sobre todos

00:08:35.486 --> 00:08:38.766 align:middle
ellos y llama a setLocale().
Así que LocaleSwitcher es el

00:08:39.266 --> 00:08:43.656 align:middle
sujeto, y estos son los
observadores. ¿Cómo se registra

00:08:44.506 --> 00:08:47.046 align:middle
un observador? Como es lógico,

00:08:47.466 --> 00:08:52.626 align:middle
creando una clase que implemente LocaleAwareInterface.
Gracias a la autoconfiguración, Symfony etiquetará

00:08:53.366 --> 00:08:58.456 align:middle
automáticamente tu servicio
con kernel.locale_aware. ¡Sí,

00:08:58.456 --> 00:09:01.476 align:middle
utiliza el

00:09:02.076 --> 00:09:07.896 align:middle
mismo mecanismo para enganchar todo esto que acabamos
de utilizar! En realidad, las ventajas del patrón

00:09:08.616 --> 00:09:12.806 align:middle
observador se describen mejor si
se observan los principios SOLID.

00:09:12.806 --> 00:09:15.406 align:middle
Este patrón ayuda al patrón de

00:09:16.016 --> 00:09:19.176 align:middle
Responsabilidad Única porque puedes encapsular

00:09:19.376 --> 00:09:25.126 align:middle
(o aislar) el código en clases más
pequeñas. En lugar de poner todo

00:09:25.326 --> 00:09:28.686 align:middle
en GameApplication, como toda nuestra

00:09:29.046 --> 00:09:36.366 align:middle
lógica XP aquí, pudimos aislar las cosas
en XpEarnedObserver y mantener ambas clases

00:09:36.696 --> 00:09:38.756 align:middle
más centradas. Este patrón también ayuda

00:09:39.516 --> 00:09:42.466 align:middle
con el principio de abierto-cerrado
, porque ahora podemos

00:09:42.796 --> 00:09:49.376 align:middle
ampliar el comportamiento de GameApplication sin
modificar su código. El patrón observador también

00:09:50.046 --> 00:09:55.226 align:middle
sigue el Principio de Inversión
de la Dependencia o DIP, que es uno

00:09:55.386 --> 00:09:58.656 align:middle
de los principios más complicados, en mi
opinión. En cualquier caso, el DIP es feliz

00:09:59.476 --> 00:10:07.916 align:middle
porque la clase de alto nivel - GameApplication -
acepta una interfaz - GameObserverInterface - y esa

00:10:08.106 --> 00:10:13.226 align:middle
interfaz fue diseñada con el
propósito de que GameApplication

00:10:13.226 --> 00:10:16.056 align:middle
la utilice. Desde la perspectiva
de GameApplication, esta interfaz

00:10:16.856 --> 00:10:22.276 align:middle
representa algo que quiere
"observar" lo que ocurre

00:10:22.276 --> 00:10:26.916 align:middle
cuando algo ocurre dentro del juego.
A saber, el final del combate. Por

00:10:27.456 --> 00:10:29.976 align:middle
tanto, GameObserverInterface es

00:10:30.626 --> 00:10:34.376 align:middle
un buen nombre. Pero, si le hubiéramos

00:10:34.896 --> 00:10:36.896 align:middle
puesto un nombre basado en la
forma en que los observadores

00:10:36.896 --> 00:10:43.746 align:middle
utilizarán la interfaz, eso habría
entristecido al DIP. Por ejemplo, si

00:10:44.446 --> 00:10:51.326 align:middle
lo hubiéramos llamado XpChangerInterface y
el método timeToChangeTheXp, eso sería una

00:10:51.686 --> 00:10:55.746 align:middle
violación del Principio de Inversión de
la Dependencia. Si esto te resulta confuso y

00:10:56.436 --> 00:11:00.886 align:middle
quieres saber más, consulta nuestro tutorial
sobre SOLID. A continuación, pasemos rápidamente

00:11:02.006 --> 00:11:07.116 align:middle
al patrón hermano del observador: Pub/sub
