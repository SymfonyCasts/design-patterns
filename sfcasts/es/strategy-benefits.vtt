WEBVTT

00:00:01.016 --> 00:00:05.986 align:middle
Acabamos de utilizar el Patrón de Estrategia para
permitir que cosas ajenas a la clase Character

00:00:05.986 --> 00:00:10.866 align:middle
controlen cómo se producen los ataques,
creando un AttackType personalizado...

00:00:11.216 --> 00:00:13.916 align:middle
y pasándolo cuando creas el Character.

00:00:14.816 --> 00:00:19.816 align:middle
Si has leído sobre este patrón, puede que te
preguntes por qué no hemos llamado a la interfaz

00:00:19.816 --> 00:00:22.786 align:middle
AttackStrategy como el patrón.

00:00:23.426 --> 00:00:24.866 align:middle
La respuesta es...

00:00:25.136 --> 00:00:27.296 align:middle
porque no tenemos que hacerlo. En

00:00:27.816 --> 00:00:33.206 align:middle
serio, la claridad y el propósito
de esta clase son más valiosos

00:00:33.206 --> 00:00:35.276 align:middle
que insinuar el nombre de un patrón.

00:00:36.166 --> 00:00:38.556 align:middle
Si llamáramos a esto "estrategia de ataque"...

00:00:38.836 --> 00:00:44.656 align:middle
podría parecer que se encarga de
planificar una estrategia de ataque.

00:00:45.346 --> 00:00:47.376 align:middle
No es eso lo que pretendíamos.

00:00:47.796 --> 00:00:53.906 align:middle
De ahí nuestro nombre: AttackType Hagamos
otro ejemplo rápido de patrón de estrategia

00:00:54.046 --> 00:00:56.186 align:middle
para equilibrar más nuestros personajes.

00:00:56.246 --> 00:00:59.376 align:middle
Quiero poder controlar la armadura

00:00:59.376 --> 00:01:03.666 align:middle
de cada personaje más allá del número
que se está pasando ahora mismo.

00:01:04.466 --> 00:01:11.066 align:middle
Esto se utiliza en receiveAttack() para
calcular en cuánto se puede reducir un ataque.

00:01:12.226 --> 00:01:17.506 align:middle
Esto estaba bien antes, pero ahora quiero
empezar a crear tipos de armadura muy

00:01:17.636 --> 00:01:20.526 align:middle
diferentes que tengan cada uno propiedades
distintas más allá de un simple número.

00:01:21.326 --> 00:01:24.096 align:middle
Tendremos que actualizar nuestro
código para permitir esto.

00:01:24.956 --> 00:01:31.536 align:middle
Una vez más, podríamos resolverlo creando
subclases, como CharacterWithShield.

00:01:32.306 --> 00:01:35.886 align:middle
Pero ahora puedes ver, con suerte,
por qué no es un buen plan.

00:01:36.636 --> 00:01:41.676 align:middle
Si también hubiéramos utilizado la herencia
para personalizar cómo se producen los ataques,

00:01:41.976 --> 00:01:46.846 align:middle
podríamos acabar con clases como
TwoHandedSwordWithShieldCharacter

00:01:47.276 --> 00:01:52.976 align:middle
o SpellCastingAndBowUsingWearingLeatherArmorCharacter.
¡Yikes!

00:01:53.406 --> 00:01:57.146 align:middle
Así que, en lugar de
navegar por esa pesadilla de

00:01:57.146 --> 00:02:01.366 align:middle
subclases interminables, utilizaremos
el Patrón de Estrategia.

00:02:02.316 --> 00:02:04.556 align:middle
Repasemos los tres pasos anteriores. El

00:02:05.016 --> 00:02:10.756 align:middle
primer paso es identificar el código que hay
que cambiar y crear una interfaz para él. En

00:02:11.756 --> 00:02:16.766 align:middle
nuestro caso, tenemos que determinar en
cuánto debe reducirse un ataque. Genial:

00:02:17.766 --> 00:02:24.636 align:middle
crea un nuevo directorio ArmorType/ y
dentro de él, una nueva clase PHP... que

00:02:25.086 --> 00:02:27.376 align:middle
en realidad será una interfaz... y

00:02:27.676 --> 00:02:29.966 align:middle
llámala, qué tal, ArmorType. Para

00:02:31.346 --> 00:02:37.356 align:middle
alojar el código de reducción de la armadura , digamos
public function getArmorReduction() donde pasaremos

00:02:37.356 --> 00:02:39.416 align:middle
el $damage que vamos a hacer, y

00:02:39.966 --> 00:02:43.836 align:middle
nos devolverá cuánta reducción de daño
debe aplicar la armadura. El segundo paso

00:02:45.306 --> 00:02:49.336 align:middle
es crear al menos una
implementación de esto. Crea

00:02:50.246 --> 00:02:56.366 align:middle
una nueva clase PHP llamada ShieldType y haz
que implemente ArmorType. A continuación,

00:02:57.446 --> 00:03:00.976 align:middle
generaré el método getArmorReduction(). El

00:03:02.376 --> 00:03:09.826 align:middle
escudo es genial porque va a tener un 20% de posibilidades
de bloquear completamente un ataque entrante. Crea

00:03:10.786 --> 00:03:15.316 align:middle
una variable $chanceToBlock con
el valor Dice::roll(100). Luego,

00:03:15.316 --> 00:03:23.396 align:middle
si el $chanceToBlock es > 80, vamos
a reducir todo el daño. Así que

00:03:23.656 --> 00:03:25.176 align:middle
devuelve $damage. Si no,

00:03:25.756 --> 00:03:31.126 align:middle
nuestro escudo no tendrá sentido
y reducirá el daño en cero. ¡Ay!

00:03:31.756 --> 00:03:36.276 align:middle
Ya que estamos aquí, vamos a crear
otros dos tipos de armadura. La

00:03:37.396 --> 00:03:39.516 align:middle
primera es una LeatherArmorType.

00:03:41.406 --> 00:03:45.396 align:middle
Pondré la lógica: absorbe el 20% del daño. Y

00:03:46.546 --> 00:03:52.096 align:middle
luego crearé la genial IceBlockType: una cosita
para nuestra gente mágica . También pegaré

00:03:52.756 --> 00:03:54.916 align:middle
esa lógica. Esto absorberá

00:03:55.476 --> 00:03:59.396 align:middle
dos tiradas de dados de
ocho caras sumadas. Vale,

00:04:00.476 --> 00:04:06.826 align:middle
tercer paso: permite pasar un objeto de la
interfaz ArmorType a Character... y luego

00:04:07.066 --> 00:04:09.096 align:middle
utiliza su lógica. En

00:04:10.086 --> 00:04:13.126 align:middle
este caso, no necesitaremos el número
$armor en absoluto. En su lugar,

00:04:14.266 --> 00:04:17.946 align:middle
añade un argumento private
ArmorType $armorType. Abajo

00:04:19.736 --> 00:04:22.316 align:middle
, en receiveAttack(), di

00:04:22.536 --> 00:04:28.256 align:middle
$armorReduction =
$this->armorType->getArmorReduction() y pasa

00:04:28.776 --> 00:04:30.276 align:middle
$damage. Y

00:04:31.676 --> 00:04:34.946 align:middle
para asegurarte de que las cosas
no se desvían en negativo, añade

00:04:35.336 --> 00:04:41.036 align:middle
un max() después de $damageTaken pasando
$damage - $armorReduction y 0. Ya está

00:04:42.236 --> 00:04:46.146 align:middle
Character ahora aprovecha el
Patrón de Estrategia... ¡de nuevo!

00:04:46.456 --> 00:04:51.286 align:middle
Vamos a aprovecharlo en
GameApplication. Empieza

00:04:52.426 --> 00:04:55.566 align:middle
por eliminar el número de armadura
en cada uno de ellos. Luego

00:04:56.416 --> 00:05:00.536 align:middle
pasaré rápidamente a un
ArmorType: new ShieldType(), new

00:05:01.966 --> 00:05:06.436 align:middle
LeatherArmorType() , y new IceBlockType(). Para

00:05:06.436 --> 00:05:12.716 align:middle
nuestro mage-archer, que es nuestro
personaje raro, lo mantendremos raro

00:05:12.836 --> 00:05:16.166 align:middle
dándole un escudo - new
ShieldType() . ¡ Eso es

00:05:16.956 --> 00:05:18.236 align:middle
mucho para llevar! Ah,

00:05:19.206 --> 00:05:23.196 align:middle
y también tengo que asegurarme de quitarme
la armadura para eso también. ¡Perfecto!

00:05:24.136 --> 00:05:26.466 align:middle
Vamos a probar este equipo. Dirígete

00:05:26.986 --> 00:05:28.026 align:middle
y corre: ./bin/console app:game:play

00:05:28.076 --> 00:05:31.256 align:middle
Y ... ¡parece

00:05:31.916 --> 00:05:33.416 align:middle
que funciona! Juguemos

00:05:34.056 --> 00:05:36.916 align:middle
como mage-archer y... ¡qué bien! Bueno,

00:05:37.636 --> 00:05:40.476 align:middle
he perdido. Eso no es dulce

00:05:40.976 --> 00:05:43.526 align:middle
, ¡pero me esforcé al máximo! Y

00:05:43.786 --> 00:05:49.006 align:middle
puedes ver que el "daño infligido" y el "daño recibido"
parecen seguir funcionando. ¡Espectacular! ¡ Así que ése

00:05:49.866 --> 00:05:53.846 align:middle
es el Patrón de Estrategia! ¿Cuándo

00:05:54.336 --> 00:05:55.666 align:middle
lo necesitas? Cuando

00:05:56.046 --> 00:06:01.416 align:middle
encuentres que necesitas cambiar sólo una parte
del código dentro de una clase. ¿Y cuáles

00:06:02.156 --> 00:06:04.286 align:middle
son las ventajas? ¡Un montón!

00:06:04.856 --> 00:06:09.676 align:middle
A diferencia de la herencia, ahora
podemos crear personajes con infinitas

00:06:09.676 --> 00:06:13.556 align:middle
combinaciones de comportamientos
de ataque y armadura.

00:06:13.906 --> 00:06:18.256 align:middle
También podemos intercambiar un AttackType o un
ArmorType en tiempo de ejecución. Esto significa

00:06:19.376 --> 00:06:25.646 align:middle
que podríamos, por ejemplo, leer alguna configuración
o variable de entorno y utilizarla dinámicamente

00:06:25.726 --> 00:06:31.436 align:middle
para cambiar uno de los tipos de ataque de
nuestros personajes sobre la marcha. Eso no es

00:06:31.946 --> 00:06:34.736 align:middle
posible con la herencia. Si has

00:06:34.806 --> 00:06:41.056 align:middle
visto nuestro tutorial sobre SOLID, el Patrón de Estrategia
es una clara victoria para el SRP -el principio de

00:06:41.056 --> 00:06:46.746 align:middle
responsabilidad única- y el OCP -el principio
de abierto-cerrado-. El Patrón de Estrategia nos

00:06:47.496 --> 00:06:52.496 align:middle
permite dividir las clases grandes, como
Character, en otras más pequeñas y centradas

00:06:52.496 --> 00:06:56.856 align:middle
, pero que siguen interactuando
entre sí. Eso satisf ace a

00:06:57.676 --> 00:06:59.226 align:middle
SRP. Y OCP está contento

00:07:00.236 --> 00:07:06.206 align:middle
porque ahora tenemos una forma de
modificar o ampliar el comportamiento de la

00:07:06.206 --> 00:07:10.656 align:middle
claseCharacter sin cambiar realmente el
código que hay dentro. En su lugar, podemos

00:07:11.156 --> 00:07:14.216 align:middle
pasar nuevos tipos de armadura y
de ataque. Por último, ¿dónde

00:07:14.276 --> 00:07:20.016 align:middle
podríamos ver este patrón
en el mundo real? Un ejemplo,

00:07:20.806 --> 00:07:27.716 align:middle
si pulsas "shift" + "shift" y escribes Session.php,
es la clase Session de Symfony. El Session

00:07:28.746 --> 00:07:34.476 align:middle
es un simple almacén de valores clave, pero diferentes
aplicaciones necesitarán almacenar esos datos en diferentes

00:07:34.476 --> 00:07:38.526 align:middle
lugares, como el sistema de archivos
o una base de datos. En lugar de

00:07:39.426 --> 00:07:42.956 align:middle
intentar conseguirlo con un
montón de código dentro de la

00:07:42.956 --> 00:07:48.256 align:middle
propia claseSession, Session acepta
un SessionStorageInterface. Podemos

00:07:49.126 --> 00:07:53.766 align:middle
pasar cualquier estrategia de
almacenamiento de sesión que queramos.

00:07:54.546 --> 00:08:00.666 align:middle
Incluso podríamos utilizar variables de entorno para cambiar a un
almacenamiento diferente en tiempo de ejecución ¿Dónde más se

00:08:01.616 --> 00:08:04.246 align:middle
utiliza el patrón de estrategia? Bueno, es

00:08:04.836 --> 00:08:09.376 align:middle
sutil, pero en realidad se utiliza
en muchos sitios. Siempre que

00:08:10.136 --> 00:08:14.546 align:middle
tengas una clase que acepte una interfaz como
argumento del constructor, especialmente si

00:08:15.016 --> 00:08:19.646 align:middle
esa interfaz procede de la
misma biblioteca, es muy

00:08:19.936 --> 00:08:22.576 align:middle
posible que se trate del
Patrón de Estrategia. Significa

00:08:23.366 --> 00:08:29.196 align:middle
que el autor de la biblioteca decidió que, en
lugar de poner un montón de código en medio de la

00:08:29.196 --> 00:08:33.636 align:middle
clase, debería abstraerse en otra clase. Y, al

00:08:34.066 --> 00:08:39.726 align:middle
hacer una interfaz de tipo, están
permitiendo que otra persona pase la

00:08:39.726 --> 00:08:43.846 align:middle
implementación -o estrategia-
que quiera. He aquí otro

00:08:45.236 --> 00:08:46.226 align:middle
ejemplo. En

00:08:46.756 --> 00:08:49.846 align:middle
GitHub, estoy en el repositorio
de Symfony. Pulsa "t "

00:08:50.566 --> 00:08:54.106 align:middle
y busca JsonLoginAuthenticator. Este es

00:08:55.406 --> 00:09:00.506 align:middle
el código detrás del autentificador de
seguridad json_login. Una necesidad común

00:09:01.206 --> 00:09:06.706 align:middle
con el JsonLoginAuthenticator es
utilizarlo de forma normal... pero luego

00:09:07.086 --> 00:09:12.096 align:middle
tomar el control de lo que ocurre en
caso de éxito: por ejemplo, controlar

00:09:12.326 --> 00:09:15.916 align:middle
el JSON que se devuelve tras la
autenticación. Para permitir

00:09:16.846 --> 00:09:20.786 align:middle
eso JsonLoginAuthenticator te permite pasar un

00:09:20.786 --> 00:09:24.466 align:middle
AuthenticationSuccessHandlerInterface.
Así, en lugar

00:09:24.886 --> 00:09:30.986 align:middle
de que esta clase intente averiguar qué
hacer en caso de éxito, nos permite pasar una

00:09:31.036 --> 00:09:35.416 align:middle
implementación personalizada que nos
da el control total. ¿Crees que tienes

00:09:35.536 --> 00:09:37.476 align:middle
todo eso? ¡Genial!

00:09:38.046 --> 00:09:41.846 align:middle
Hablemos ahora del Patrón Constructor
