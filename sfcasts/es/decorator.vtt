WEBVTT

00:00:01.076 --> 00:00:03.186 align:middle
¡Queda un patrón de diseño más!

00:00:03.426 --> 00:00:07.216 align:middle
Y sinceramente, creo que hemos
dejado lo mejor para el final.

00:00:07.676 --> 00:00:09.686 align:middle
Se trata del patrón decorador.

00:00:10.176 --> 00:00:12.646 align:middle
Este patrón es un patrón estructural,

00:00:12.986 --> 00:00:17.886 align:middle
así que se trata de cómo organizar
y conectar clases relacionadas.

00:00:18.246 --> 00:00:21.376 align:middle
Esto tendrá más sentido
cuando lo descubramos.

00:00:22.066 --> 00:00:28.226 align:middle
Esta es la definición técnica: El patrón
decorador te permite adjuntar nuevos comportamientos

00:00:28.226 --> 00:00:33.786 align:middle
a los objetos colocando estos objetos
dentro de objetos envolventes especiales

00:00:33.786 --> 00:00:35.436 align:middle
que contienen los comportamientos.

00:00:35.956 --> 00:00:40.816 align:middle
Sí... Probemos con esta
definición El patrón decorador es

00:00:40.816 --> 00:00:44.476 align:middle
como un ataque intencionado
del hombre en el medio.

00:00:44.856 --> 00:00:48.776 align:middle
Sustituyes una clase por tu
implementación personalizada,

00:00:48.906 --> 00:00:51.916 align:middle
ejecutas algún código y luego
llamas al método verdadero.

00:00:52.746 --> 00:00:56.746 align:middle
Antes de profundizar más y de ponerte
más nervioso, veámoslo en acción.

00:00:57.436 --> 00:01:02.696 align:middle
Este es el objetivo: quiero imprimir algo en la
pantalla cada vez que un jugador suba de nivel.

00:01:03.346 --> 00:01:07.206 align:middle
La lógica para subir de nivel
está dentro de XpCalculator:

00:01:07.536 --> 00:01:13.236 align:middle
Pero en lugar de cambiar el código de esta clase,
vamos a aplicar el patrón decorador, que nos permitirá

00:01:13.546 --> 00:01:17.936 align:middle
ejecutar código antes o
después de esta lógica...

00:01:18.116 --> 00:01:20.916 align:middle
sin cambiar realmente el
código que hay dentro.

00:01:21.626 --> 00:01:26.166 align:middle
Este es un patrón particularmente común
para aprovechar si la clase que quieres

00:01:26.166 --> 00:01:29.556 align:middle
modificar es un servicio de proveedor que...

00:01:29.706 --> 00:01:31.846 align:middle
no puedes modificar realmente.

00:01:32.256 --> 00:01:37.826 align:middle
Y sobre todo si esa clase no nos da
ninguna otra forma de engancharnos a ella,

00:01:38.216 --> 00:01:41.946 align:middle
como por ejemplo implementando los
patrones observador o estrategia.

00:01:43.056 --> 00:01:48.206 align:middle
Para que el patrón decorador funcione,
sólo hay una regla: la clase que queremos

00:01:48.206 --> 00:01:52.476 align:middle
decorar (es decir, la clase que
queremos extender o modificar -

00:01:52.856 --> 00:01:57.376 align:middle
XpCalculator en nuestro caso)
tiene que implementar una interfaz.

00:01:57.926 --> 00:02:00.106 align:middle
Verás por qué en unos minutos.

00:02:00.876 --> 00:02:05.056 align:middle
Si XpCalculator fuera un paquete
de proveedores, nosotros...

00:02:05.056 --> 00:02:09.856 align:middle
tendríamos que esperar que hicieran un buen
trabajo y lo hicieran implementar una interfaz.

00:02:10.106 --> 00:02:13.566 align:middle
Pero como este es nuestro
código, podemos añadir una.

00:02:14.386 --> 00:02:16.766 align:middle
En el directorio Service/,
crea una nueva clase...

00:02:16.996 --> 00:02:18.726 align:middle
pero cámbiala por una interfaz.

00:02:19.466 --> 00:02:22.036 align:middle
Llamémosla XpCalculatorInterface.

00:02:23.606 --> 00:02:29.776 align:middle
Luego, iré a robar la firma del
método para addXp(), la pegaré aquí,

00:02:30.866 --> 00:02:33.026 align:middle
añadiré una declaración
use y un punto y coma:

00:02:33.476 --> 00:02:34.526 align:middle
¡suficientemente fácil!

00:02:35.346 --> 00:02:39.686 align:middle
En XpCalculator, implementa
XpCalculatorInterface:

00:02:40.466 --> 00:02:43.696 align:middle
Y por último, abre XpEarnedObserver.

00:02:44.346 --> 00:02:49.226 align:middle
Este es el único lugar de nuestro
código que utiliza XpCalculator.

00:02:50.166 --> 00:02:53.846 align:middle
Cambia esto para permitir
cualquier XpCalculatorInterface:

00:02:54.926 --> 00:03:00.166 align:middle
Esto nos muestra por qué una clase debe implementar
una interfaz para soportar la decoración.

00:03:00.756 --> 00:03:07.216 align:middle
Dado que las clases que utilizan nuestro XpCalculator
pueden ahora indicar una interfaz en lugar

00:03:07.216 --> 00:03:12.796 align:middle
de la clase concreta, vamos a poder
cambiar el verdadero XpCalculator

00:03:12.796 --> 00:03:16.276 align:middle
por nuestra propia clase,
conocida como decorador.

00:03:16.866 --> 00:03:18.496 align:middle
¡Vamos a crear esa clase ahora!

00:03:19.416 --> 00:03:23.956 align:middle
En el directorio src/Service/, añade
una nueva clase PHP y llámala, qué tal,

00:03:24.266 --> 00:03:28.286 align:middle
OutputtingXpCalculator, ya que
se trata de un XpCalculator

00:03:28.486 --> 00:03:30.616 align:middle
que mostrará cosas en la pantalla: Lo

00:03:31.346 --> 00:03:36.476 align:middle
más importante de la clase decoradora
es que debe llamar a todos los

00:03:36.476 --> 00:03:39.736 align:middle
métodos reales del servicio real.

00:03:40.206 --> 00:03:44.246 align:middle
Sí, vamos a pasar literalmente
el XpCalculator real

00:03:44.486 --> 00:03:47.606 align:middle
a éste para poder llamar
a los métodos de éste.

00:03:48.546 --> 00:03:51.096 align:middle
Crea un public function __construct()

00:03:51.626 --> 00:03:56.436 align:middle
y acepta un private readonly
XpCalculatorInterface llamado,

00:03:56.686 --> 00:03:58.666 align:middle
qué tal, $innerCalculator.

00:04:00.196 --> 00:04:04.926 align:middle
Nuestro OutputtingXpCalculator también necesita
implementar XpCalculatorInterface para que se pueda pasar

00:04:05.176 --> 00:04:08.756 align:middle
a cosas como nuestro observador:

00:04:10.266 --> 00:04:15.206 align:middle
Ve a "Código"->"Generar" y selecciona
"Implementar métodos" para generar addXp().

00:04:17.636 --> 00:04:20.146 align:middle
Añadiré la declaración use que falta y:

00:04:20.366 --> 00:04:28.076 align:middle
¡Perfecto! Como he mencionado, lo más importante
que debe hacer siempre el decorador es llamar a

00:04:28.076 --> 00:04:32.036 align:middle
ese servicio interno en todos los
métodos de la interfaz pública.

00:04:32.766 --> 00:04:37.496 align:middle
En otras palabras, digamos
$this->addXp($winner, $enemyLevel)...

00:04:38.116 --> 00:04:42.026 align:middle
oh, quiero decir
$this->innerCalculator->addXp():

00:04:42.726 --> 00:04:43.306 align:middle
¡Mucho mejor!

00:04:44.126 --> 00:04:47.936 align:middle
Con los decoradores, creas
una cadena de objetos.

00:04:48.496 --> 00:04:50.096 align:middle
En este caso, tenemos dos:

00:04:50.386 --> 00:04:56.786 align:middle
el OutputtingXpCalculator llamará
al verdadero XpCalculator.

00:04:57.496 --> 00:05:02.516 align:middle
Una de las ventajas de los decoradores
es que puedes tener tantos como quieras:

00:05:03.096 --> 00:05:07.136 align:middle
¡podríamos decorar nuestro
decorador para crear tres clases!

00:05:07.426 --> 00:05:08.786 align:middle
¡Lo veremos más adelante! De

00:05:09.676 --> 00:05:14.196 align:middle
todos modos, aquí abajo, ahora tenemos
la posibilidad de ejecutar código antes

00:05:14.276 --> 00:05:16.726 align:middle
o después de llamar al servicio interno.

00:05:17.086 --> 00:05:24.226 align:middle
Así que antes, digamos $beforeLevel =
$winner->getLevel() para almacenar el nivel inicial.

00:05:25.146 --> 00:05:28.826 align:middle
Luego, abajo, $afterLevel
= $winner->getLevel().

00:05:30.276 --> 00:05:37.106 align:middle
Por último, if ($afterLevel > $beforeLevel),
¡sabemos que acabamos de subir de nivel!

00:05:37.606 --> 00:05:40.016 align:middle
Y eso merece una celebración...

00:05:40.246 --> 00:05:41.656 align:middle
¡como imprimir algunas cosas!

00:05:42.166 --> 00:05:44.726 align:middle
Diré $output = new ConsoleOutput()...

00:05:45.006 --> 00:05:49.656 align:middle
que no es más que una forma barata de
escribir en la consola, y luego pegaré

00:05:49.656 --> 00:05:52.326 align:middle
unas cuantas líneas para dar
salida a un bonito mensaje:

00:05:53.626 --> 00:05:56.686 align:middle
Vale, ¡nuestra clase decoradora está hecha!

00:05:57.306 --> 00:05:59.626 align:middle
Pero... ¿cómo conectamos esto?

00:05:59.626 --> 00:06:07.636 align:middle
Lo que tenemos que hacer es sustituir todas las
instancias de XpCalculator en nuestro sistema

00:06:07.836 --> 00:06:10.986 align:middle
por nuestro nuevo OutputtingXpCalculator.

00:06:11.786 --> 00:06:16.976 align:middle
Vamos a hacer esto manualmente primero,
sin las cosas de contenedor de Symfony.

00:06:17.866 --> 00:06:23.876 align:middle
Sólo hay un lugar en nuestro código que
utiliza XpCalculator: XpEarnedObserver.

00:06:24.626 --> 00:06:29.946 align:middle
Abre src/Kernel.php y comenta temporalmente la

00:06:29.946 --> 00:06:32.636 align:middle
magia "subscribe" que hemos añadido antes:

00:06:33.386 --> 00:06:40.416 align:middle
Lo hago porque, de momento, quiero
instanciar manualmente XpEarnedObserver

00:06:40.716 --> 00:06:44.256 align:middle
y suscribirlo manualmente en GameApplication...

00:06:44.436 --> 00:06:47.456 align:middle
sólo para que podamos ver
cómo funciona la decoración.

00:06:48.066 --> 00:06:54.836 align:middle
En src/Command/GameCommand.php, volvamos a poner nuestra
lógica de configuración del patrón observador manual

00:06:54.836 --> 00:06:59.196 align:middle
de antes: $xpCalculator = new XpCalculator()

00:06:59.766 --> 00:07:07.026 align:middle
y luego $this->game->subscribe(new
XpEarnedObserver() pasando a $xpCalculator:

00:07:07.956 --> 00:07:10.006 align:middle
Todavía no estamos utilizando el decorador...

00:07:10.206 --> 00:07:14.146 align:middle
pero esto debería ser suficiente para que
nuestra aplicación siga funcionando como antes.

00:07:15.446 --> 00:07:21.196 align:middle
Cuando probemos el comando ¡Ganamos!

00:07:21.736 --> 00:07:26.936 align:middle
Y conseguimos algo de XP, lo que significa que
XpEarnedObserver está haciendo su trabajo.

00:07:27.816 --> 00:07:30.636 align:middle
Entonces, ¿cómo utilizamos el decorador?

00:07:31.306 --> 00:07:37.336 align:middle
Sustituyendo sigilosamente el
XpCalculator real por el falso.

00:07:38.276 --> 00:07:42.466 align:middle
Decimos $xpCalculator = new
OutputtingXpCalculator(),

00:07:43.096 --> 00:07:45.946 align:middle
y le pasamos el original $xpCalculator:

00:07:46.566 --> 00:07:47.666 align:middle
¡Ya está!

00:07:48.326 --> 00:07:51.966 align:middle
De repente, aunque no tenga
ni idea, ¡se está pasando a

00:07:52.476 --> 00:07:56.346 align:middle
XpEarnedObserver nuestro servicio de decorador!

00:07:56.836 --> 00:07:58.556 align:middle
¡Te dije que era furtivo!

00:07:59.236 --> 00:08:00.416 align:middle
Así que vamos a empezar de nuevo.

00:08:00.856 --> 00:08:03.346 align:middle
Ejecuta el juego de nuevo
y lucha unas cuantas veces.

00:08:04.236 --> 00:08:09.006 align:middle
El nuevo decorador debería imprimir un mensaje
especial en el momento en que subamos de nivel.

00:08:09.796 --> 00:08:12.126 align:middle
Lucha una vez más y...

00:08:12.576 --> 00:08:15.036 align:middle
¡lo tengo! Ahora somos de nivel 2.

00:08:15.396 --> 00:08:22.516 align:middle
¡Funciona! Si te preguntas por qué el mensaje
se imprimió antes de que empezara la batalla...

00:08:22.846 --> 00:08:27.586 align:middle
eso "podría" ser porque estos
iconos de batalla valiente son...

00:08:27.716 --> 00:08:33.906 align:middle
en realidad sólo una decoración elegante:
técnicamente la batalla termina antes de que aparezcan.

00:08:34.776 --> 00:08:38.396 align:middle
Bien, hemos creado con
éxito una clase decoradora.

00:08:38.946 --> 00:08:42.916 align:middle
¡Es increíble! Pero, ¿cómo podríamos
sustituir el servicio XpCalculator

00:08:42.916 --> 00:08:46.186 align:middle
por el decorador a través
del contenedor de Symfony?

00:08:46.976 --> 00:08:49.096 align:middle
Vamos a descubrir una forma a continuación.

00:08:49.436 --> 00:08:52.926 align:middle
Después haremos algo aún
más genial con el decorador
