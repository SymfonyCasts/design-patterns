WEBVTT

00:00:00.796 --> 00:00:06.116 align:middle
Podemos ejecutar código justo antes de que
comience una batalla registrando lo que se llama un

00:00:06.116 --> 00:00:08.566 align:middle
"oyente" en FightStartingEvent.

00:00:09.226 --> 00:00:12.596 align:middle
Como puedes ver, un oyente
puede ser cualquier función...

00:00:12.806 --> 00:00:15.606 align:middle
aunque lo que vemos aquí
es un poco menos común.

00:00:16.336 --> 00:00:20.346 align:middle
Normalmente, un oyente será
un método dentro de una clase.

00:00:20.736 --> 00:00:23.566 align:middle
Y en unos minutos refactorizaremos a eso.

00:00:24.116 --> 00:00:28.986 align:middle
Pero antes de hacerlo, podría ser
útil tener un poco más de información

00:00:28.986 --> 00:00:32.186 align:middle
en nuestra función de escucha, como
quién está a punto de combatir.

00:00:32.856 --> 00:00:35.526 align:middle
Ese es el trabajo de esta clase de evento.

00:00:35.986 --> 00:00:38.276 align:middle
Puede llevar los datos que queramos.

00:00:38.916 --> 00:00:43.716 align:middle
Por ejemplo, crea un public function
__construct() con dos propiedades...

00:00:44.056 --> 00:00:49.346 align:middle
que voy a hacer públicas para
simplificar: $player y $ai:

00:00:50.976 --> 00:00:57.396 align:middle
¡Genial! En GameApplication, tenemos
que pasar estos datos: $player y $ai:

00:00:58.736 --> 00:01:03.846 align:middle
De vuelta a nuestro oyente, a esta función
se le pasará un objeto FightStartingEvent.

00:01:04.316 --> 00:01:06.836 align:middle
De hecho, siempre se le ha pasado...

00:01:07.136 --> 00:01:09.276 align:middle
sólo que antes no era útil.

00:01:09.636 --> 00:01:16.396 align:middle
Ahora podemos decir Fight is starting against,
seguido de $event->ai->getNickname():

00:01:17.396 --> 00:01:18.466 align:middle
Muy bonito.

00:01:18.826 --> 00:01:19.486 align:middle
¡Pruébalo!

00:01:20.146 --> 00:01:22.706 align:middle
Vuelvo a ejecutar el comando y...

00:01:22.956 --> 00:01:27.946 align:middle
¡qué bien! ¡Vemos ! [NOTA] El
combate está empezando contra

00:01:28.406 --> 00:01:32.256 align:middle
la IA: Mago Lo único que me falta es el
espacio después de "contra" para que quede

00:01:32.926 --> 00:01:34.266 align:middle
más bonito. Lo arreglaré

00:01:35.276 --> 00:01:40.336 align:middle
rápidamente: Como he mencionado, realmente
puedes poner los datos que quieras dentro de

00:01:40.636 --> 00:01:46.456 align:middle
FightStartingEvent. Diablos, podrías crear
una propiedad public $shouldBattle = true si

00:01:46.956 --> 00:01:52.716 align:middle
quisieras. Luego, en un oyente,
podrías decir $event->shouldBattle =

00:01:53.096 --> 00:01:56.826 align:middle
false .. . quizás porque los
personajes han utilizado la

00:01:56.826 --> 00:01:59.416 align:middle
comunicación y la honestidad para resolver sus

00:01:59.906 --> 00:02:00.716 align:middle
problemas. ¡Un movimiento valiente

00:02:01.636 --> 00:02:08.706 align:middle
! De todos modos, en GameApplication, podrías
entonces asignar este evento a un nuevo objeto $event,

00:02:09.446 --> 00:02:12.406 align:middle
despacharlo, y si no deben luchar, simplemente

00:02:12.696 --> 00:02:16.186 align:middle
return. O podrías return new
FightResult() o lanzar una

00:02:16.546 --> 00:02:18.126 align:middle
excepción. En cualquier
caso, ya ves el sentido.

00:02:18.746 --> 00:02:24.966 align:middle
Tus oyentes pueden, en cierto modo, comunicarse
con el objeto central para controlar su

00:02:25.626 --> 00:02:32.106 align:middle
comportamiento. Desharé todo eso dentro de
GameApplication, FightStartingEvent y también

00:02:33.476 --> 00:02:36.366 align:middle
GameCommand . Por muy fácil
que sea este oyente en línea

00:02:36.706 --> 00:02:39.716 align:middle
, es más habitual crear una clase
independiente para tu oyente.

00:02:40.266 --> 00:02:46.846 align:middle
Puedes crear una clase oyente, que es
básicamente una clase que tiene este código

00:02:46.846 --> 00:02:52.936 align:middle
aquí como función pública, o
puedes crear una clase llamada

00:02:53.326 --> 00:02:57.066 align:middle
suscriptor. Ambas son formas completamente
válidas de utilizar el patrón pub/sub.

00:02:57.506 --> 00:03:01.986 align:middle
La única diferencia es cómo se
registra un oyente frente a un suscriptor

00:03:02.336 --> 00:03:05.126 align:middle
, que es bastante menor,
y lo verás en un minuto.

00:03:06.176 --> 00:03:10.636 align:middle
Vamos a refactorizar a un suscriptor
porque son más fáciles de configurar en

00:03:11.516 --> 00:03:14.666 align:middle
Symfony. En el directorio
Event/, crea una nueva clase PHP

00:03:15.066 --> 00:03:15.916 align:middle
llamada... qué

00:03:15.916 --> 00:03:20.026 align:middle
tal... OutputFightStartingSubscriber
ya que este sus criptor

00:03:20.026 --> 00:03:22.556 align:middle
va a emitir que una batalla está

00:03:23.466 --> 00:03:26.516 align:middle
comenzando: Los escuchadores de eventos
no necesitan extender ninguna clase base

00:03:26.516 --> 00:03:30.966 align:middle
ni implementar ninguna interfaz,
pero los sus criptores de eventos

00:03:31.506 --> 00:03:34.236 align:middle
sí. Necesitan implementar

00:03:35.156 --> 00:03:39.526 align:middle
EventSubscriberInterface: Ve a "Código" -> "Generar"
o Command+N en un Mac y selecciona "Implementar métodos"

00:03:39.526 --> 00:03:41.706 align:middle
para generar getSubscribedEvents():

00:03:42.556 --> 00:03:46.116 align:middle
¡Bien! Con un suscriptor
de eventos, enumerarás

00:03:46.116 --> 00:03:50.056 align:middle
los eventos a los que te suscribes
justo dentro de esta clase.

00:03:50.566 --> 00:03:55.886 align:middle
Así que diremos FightStartingEvent::class
=> 'onFightStart':

00:03:56.856 --> 00:04:00.096 align:middle
Esto dice: Cuando ocurra el FightStartingEvent,

00:04:00.096 --> 00:04:04.746 align:middle
¡quiero que llames al método
onFightStart() justo dentro de esta clase!

00:04:05.556 --> 00:04:08.286 align:middle
Crea eso: public function onFightStart()...

00:04:08.746 --> 00:04:11.816 align:middle
que recibirá un argumento FightStartingEvent:

00:04:13.156 --> 00:04:18.216 align:middle
Para las tripas de esto, ve a
GameCommand y roba la línea $io: Por

00:04:19.056 --> 00:04:22.996 align:middle
cierto, el objeto $io es
un poco difícil de pasar

00:04:22.996 --> 00:04:25.586 align:middle
de los comandos de la consola
a otras partes de tu código...

00:04:25.836 --> 00:04:30.626 align:middle
así que voy a ignorar esa
complejidad aquí y crear uno nuevo

00:04:30.626 --> 00:04:38.376 align:middle
con $io = new SymfonyStyle(new
ArrayInput([]), new ConsoleOutput():

00:04:39.546 --> 00:04:44.906 align:middle
Ahora que tenemos un suscriptor, de vuelta
en GameCommand, ¡vamos a conectarlo!

00:04:45.706 --> 00:04:50.076 align:middle
En lugar de addListener(), digamos
addSubscriber(), y dentro de éste,

00:04:50.356 --> 00:04:53.156 align:middle
new OutputFightStartingSubscriber():

00:04:53.766 --> 00:04:55.856 align:middle
¡Fácil! ¡Hora de probar!

00:04:56.416 --> 00:05:00.326 align:middle
Salgo, elijo mi personaje y...

00:05:00.736 --> 00:05:05.126 align:middle
¡vaya! Funciona tan bien que sale dos veces.

00:05:05.576 --> 00:05:06.966 align:middle
¡Es increíble!

00:05:07.756 --> 00:05:10.936 align:middle
Pero... en serio, ¿por qué imprime dos veces?

00:05:11.596 --> 00:05:15.216 align:middle
¡Esto es, una vez más,
gracias a la autoconfiguración!

00:05:15.776 --> 00:05:20.326 align:middle
Cada vez que creas una clase que
implementa EventSubscriberInterface,

00:05:20.576 --> 00:05:26.516 align:middle
el contenedor de Symfony ya la está
tomando y registrando en el EventDispatcher.

00:05:27.376 --> 00:05:33.346 align:middle
En otras palabras, Symfony, internamente,
ya está llamando a esta línea de aquí.

00:05:33.976 --> 00:05:36.396 align:middle
Así que, ¡podemos eliminarla!

00:05:36.396 --> 00:05:40.896 align:middle
Supongo que esto responde a la pregunta de
¿Cómo utilizamos el patrón pub/sub en Symfony?

00:05:41.366 --> 00:05:46.216 align:middle
Basta con crear una clase, hacer que
implemente EventSubscriberInterface y...

00:05:46.216 --> 00:05:49.676 align:middle
¡listo! Symfony la
registrará automáticamente.

00:05:50.636 --> 00:05:57.146 align:middle
Para enviar un evento, crea una nueva clase de evento
y envía ese evento en cualquier parte de tu código.

00:05:57.936 --> 00:06:00.846 align:middle
Si intentamos esto de nuevo
(primero saldré de la batalla)...

00:06:02.436 --> 00:06:04.406 align:middle
sólo saldrá una vez.

00:06:04.716 --> 00:06:06.776 align:middle
¡Genial! Y...

00:06:06.776 --> 00:06:08.956 align:middle
¿cuáles son las ventajas de pub/sub?

00:06:09.466 --> 00:06:15.086 align:middle
Realmente son las mismas que las del observador, aunque,
en la práctica, pub/sub es un poco más común...

00:06:15.596 --> 00:06:19.986 align:middle
probablemente porque Symfony ya tiene
este gran despachador de eventos.

00:06:20.446 --> 00:06:22.906 align:middle
¡La mitad del trabajo ya
está hecho para nosotros!

00:06:23.786 --> 00:06:26.366 align:middle
A continuación, ¡vamos a sumergirnos
en nuestro último patrón!

00:06:26.696 --> 00:06:33.066 align:middle
Es uno de mis favoritos y, creo, el más
potente de Symfony: El patrón decorador
