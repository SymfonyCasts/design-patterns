WEBVTT

00:00:00.956 --> 00:00:06.966 align:middle
Ahora que hemos terminado nuestra clase objeto -
GameApplication - en la que podemos llamar a subscribe()

00:00:06.966 --> 00:00:13.316 align:middle
si queremos que nos avisen cuando termine
un combate - pasemos a crear un observador

00:00:13.396 --> 00:00:17.716 align:middle
que calcule cuánta XP
debe ganar el ganador y si

00:00:17.716 --> 00:00:19.496 align:middle
el personaje debe subir de nivel o no.

00:00:20.156 --> 00:00:24.136 align:middle
Pero antes, tenemos que añadir algunas cosas a la clase
Character para ayudar. En la parte superior, añade

00:00:24.556 --> 00:00:28.416 align:middle
private int $level que será por defecto 1

00:00:28.526 --> 00:00:31.756 align:middle
y un private int $xp que será por defecto 0:

00:00:33.576 --> 00:00:40.706 align:middle
Aquí abajo un poco, añade public function
getLevel(): int que hará return $this->level...

00:00:41.536 --> 00:00:44.836 align:middle
y otro método de conveniencia
llamado addXp() que

00:00:45.056 --> 00:00:50.026 align:middle
aceptará el nuevo $xpEarned y
devolverá el nuevo número XP.

00:00:50.906 --> 00:00:54.866 align:middle
Dentro digamos de $this->xp += $xpEarned...

00:00:55.606 --> 00:00:58.776 align:middle
y return $this->xp:

00:00:58.776 --> 00:01:03.506 align:middle
Por último, justo después, voy a
pegar un método más llamado levelUp().

00:01:04.666 --> 00:01:07.516 align:middle
Lo llamaremos cuando un
personaje suba de nivel:

00:01:08.066 --> 00:01:11.666 align:middle
aumenta el $level, $maxHealth, y $baseDamage:

00:01:12.416 --> 00:01:16.066 align:middle
También podríamos subir de nivel los
tipos de ataque y armadura si quisiéramos.

00:01:17.056 --> 00:01:19.656 align:middle
Bien, ahora vamos a crear ese observador.

00:01:20.376 --> 00:01:23.886 align:middle
Dentro del directorio src/Observer/,
añade una nueva clase PHP.

00:01:23.886 --> 00:01:26.976 align:middle
Llamémosla XpEarnedObserver.

00:01:27.606 --> 00:01:32.176 align:middle
Y todos nuestros observadores necesitan
implement el GameObserverInterface.

00:01:32.876 --> 00:01:38.816 align:middle
Ve a "Generar código", o Command+N en un Mac para
implementar el método onFightFinished(): Para las

00:01:38.816 --> 00:01:44.246 align:middle
tripas de onFightFinished(), voy
a delegar el trabajo real en un

00:01:44.246 --> 00:01:46.836 align:middle
servicio llamado XpCalculator. Si has

00:01:47.486 --> 00:01:48.846 align:middle
descargado el código del curso, deberías

00:01:49.016 --> 00:01:53.766 align:middle
tener un directorio tutorial/ con
XpCalculator.php dentro. Copia eso,

00:01:54.406 --> 00:02:00.806 align:middle
en src/, crea un nuevo directorio
Service/ y pégalo dentro. Puedes

00:02:02.046 --> 00:02:05.736 align:middle
comprobarlo si quieres, pero
no es nada del otro mundo: Toma

00:02:06.246 --> 00:02:09.456 align:middle
el Character que ganó, el nivel del enemigo, y

00:02:09.726 --> 00:02:14.196 align:middle
calcula cuánta XP debe
otorgar al ganador. Luego, si

00:02:14.806 --> 00:02:19.256 align:middle
son elegibles para subir de nivel,
sube de nivel a ese personaje. En

00:02:20.416 --> 00:02:23.566 align:middle
XpEarnedObserver, podemos utilizar eso. Crea un

00:02:24.366 --> 00:02:30.836 align:middle
constructor para que podamos autoinstalar un
private readonly (readonly sólo para estar

00:02:30.836 --> 00:02:34.786 align:middle
súper a la moda) XpCalculator
$xpCalculator: A continuación, pongamos

00:02:36.536 --> 00:02:40.916 align:middle
el $winner en una variable -
$fightResult->getWinner() - y $loser

00:02:40.916 --> 00:02:45.626 align:middle
en $fightResult->getLoser().
Por último , digamos

00:02:45.626 --> 00:02:55.166 align:middle
$this->xpCalculator->addXp() y pasemos
$winner y $loser->getLevel(): ¡Precioso! El

00:02:56.246 --> 00:02:56.926 align:middle
sujeto

00:02:57.276 --> 00:03:00.116 align:middle
y el observador ya están hechos. El último

00:03:00.646 --> 00:03:03.816 align:middle
paso es instanciar el observador y hacer que

00:03:03.986 --> 00:03:08.086 align:middle
se suscriba al sujeto: GameApplication. Vamos a

00:03:08.916 --> 00:03:11.906 align:middle
hacer esto manualmente
dentro de GameCommand . Abre

00:03:12.606 --> 00:03:16.666 align:middle
src/Command/GameCommand.php,
y encuentra execute(), que es

00:03:16.956 --> 00:03:22.076 align:middle
donde actualmente estamos inicializando todo
el código dentro de nuestra aplicación. En

00:03:22.926 --> 00:03:27.476 align:middle
unos minutos, veremos una forma más
Symfony de conectar todo esto. Por

00:03:27.536 --> 00:03:33.176 align:middle
ahora, digamos $xpObserver = new
XpEarnedObserver()... y pasemos

00:03:33.306 --> 00:03:37.706 align:middle
que un servicio new XpCalculator()
para que esté contento. Entonces,

00:03:38.536 --> 00:03:46.396 align:middle
podemos decir $this->game (que es el GameApplication)
->subscribe($xpObserver): Así que estamos

00:03:47.096 --> 00:03:52.956 align:middle
suscribiendo el observador antes de ejecutar realmente
nuestra aplicación aquí. Esto significa que...

00:03:53.906 --> 00:03:54.976 align:middle
¡que estamos listos!

00:03:55.166 --> 00:03:56.436 align:middle
Pero,

00:03:57.126 --> 00:04:02.536 align:middle
para que sea un poco más evidente si
esto funciona, vuelve a Character y añade

00:04:02.666 --> 00:04:11.226 align:middle
una función más aquí llamada getXp(), que
devolverá int a través de return $this->xp: Esto

00:04:11.226 --> 00:04:13.956 align:middle
nos permitirá, dentro de GameCommand... si te

00:04:14.146 --> 00:04:16.936 align:middle
desplazas un poco hacia abajo hasta
printResults()... aquí vamos..

00:04:17.346 --> 00:04:18.026 align:middle
. añadir

00:04:18.436 --> 00:04:23.396 align:middle
algunas cosas como $io->writeIn('XP:
' . $player->getXp())... y

00:04:23.396 --> 00:04:25.926 align:middle
lo mismo

00:04:25.926 --> 00:04:31.486 align:middle
para Final Level, con
$player->getLevel(): Bien, equipo

00:04:32.586 --> 00:04:34.466 align:middle
, ¡es hora de probar! Gira,

00:04:34.686 --> 00:04:35.996 align:middle
corre ./bin/console app:game:play y

00:04:35.996 --> 00:04:40.726 align:middle
juguemos como el fighter, porque sigue siendo

00:04:40.876 --> 00:04:43.606 align:middle
uno de los personajes más
difíciles. Y... ¡impresionante! Como

00:04:44.026 --> 00:04:45.706 align:middle
hemos ganado,

00:04:46.046 --> 00:04:50.006 align:middle
hemos recibido 30 XP. Seguimos siendo de nivel

00:04:50.006 --> 00:04:53.046 align:middle
1 , así que luchemos unas cuantas
veces más. Aw... perdimos,

00:04:54.386 --> 00:04:57.206 align:middle
así que no hay XP. Ahora tenemos 60 XP..

00:04:58.636 --> 00:05:02.136 align:middle
. 90 XP... ¡guau!

00:05:02.136 --> 00:05:04.976 align:middle
¡Hemos subido de nivel!

00:05:05.096 --> 00:05:06.346 align:middle
Dice Final

00:05:06.816 --> 00:05:09.046 align:middle
Level: 2 . ¡Está funcionando! Lo

00:05:09.116 --> 00:05:10.356 align:middle
bueno de

00:05:11.216 --> 00:05:15.626 align:middle
esto es que GameApplication no
necesita saber ni preocuparse por

00:05:15.626 --> 00:05:19.696 align:middle
la XP y la lógica de la
subida de nivel. Sólo avisa a

00:05:20.076 --> 00:05:24.396 align:middle
sus suscriptores y ellos pueden hacer lo
que quieran. A continuación, vamos a ver

00:05:25.256 --> 00:05:30.296 align:middle
cómo podríamos conectar todo esto utilizando
el contenedor de Symfony. También hablaremos

00:05:30.966 --> 00:05:36.206 align:middle
de las ventajas de este patrón y de
las partes de SOLID a las que ayuda
