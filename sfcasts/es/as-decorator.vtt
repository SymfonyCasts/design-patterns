WEBVTT

00:00:01.156 --> 00:00:04.676 align:middle
En Symfony, la decoración
tiene un superpoder secreto

00:00:05.166 --> 00:00:09.536 align:middle
nos permite personalizar casi
cualquier servicio dentro de Symfony.

00:00:09.966 --> 00:00:15.146 align:middle
Woh. Por ejemplo, imagina que hay un
servicio principal de Symfony y necesitamos

00:00:15.146 --> 00:00:17.596 align:middle
ampliar su comportamiento con el nuestro.

00:00:18.306 --> 00:00:19.316 align:middle
¿Cómo podríamos hacerlo?

00:00:19.856 --> 00:00:23.106 align:middle
Bueno, podríamos subclasificar
el servicio principal...

00:00:23.286 --> 00:00:28.506 align:middle
y reconfigurar las cosas para que el contenedor
de Symfony utilice nuestra clase en lugar

00:00:28.506 --> 00:00:29.456 align:middle
de la del núcleo.

00:00:30.176 --> 00:00:31.826 align:middle
Eso podría funcionar...

00:00:32.196 --> 00:00:35.136 align:middle
pero aquí es donde brilla la decoración.

00:00:35.956 --> 00:00:41.896 align:middle
Así que, como reto, vamos a ampliar el comportamiento
del servicio central de Symfony EventDispatcher

00:00:42.106 --> 00:00:47.066 align:middle
para que cada vez que se envíe un evento,
volquemos un mensaje de depuración. El

00:00:47.606 --> 00:00:52.676 align:middle
ID del servicio que queremos
decorar es event_dispatcher

00:00:53.136 --> 00:00:57.476 align:middle
Y, afortunadamente, esta
clase implementa una interfaz.

00:00:58.716 --> 00:00:59.576 align:middle
En GitHub...

00:00:59.796 --> 00:01:08.736 align:middle
en el repositorio symfony/symfony,
pulsa t y abre EventDispatcher.php.

00:01:08.736 --> 00:01:09.856 align:middle
Y... ¡sí!

00:01:10.336 --> 00:01:12.896 align:middle
Esto implementa EventDispatcherInterface.

00:01:13.226 --> 00:01:15.236 align:middle
¡El decorador funcionará!

00:01:16.226 --> 00:01:18.096 align:middle
Vamos a crear nuestra clase decoradora.

00:01:18.856 --> 00:01:20.736 align:middle
Voy a crear un nuevo directorio Decorator/...

00:01:21.206 --> 00:01:24.146 align:middle
y dentro, una nueva clase PHP llamada...

00:01:24.276 --> 00:01:27.536 align:middle
qué tal DebugEventDispatcherDecorator.

00:01:29.836 --> 00:01:34.416 align:middle
El primer paso, es siempre implementar
la interfaz: EventDispatcherInterface...

00:01:34.726 --> 00:01:39.246 align:middle
aunque esto es un poco
complicado porque ¡hay tres!

00:01:40.056 --> 00:01:42.406 align:middle
Está Psr, que es la más pequeña...

00:01:42.786 --> 00:01:46.156 align:middle
el de Contract, y este otro de Component.

00:01:46.626 --> 00:01:50.506 align:middle
El de Component prolonga el de Contract...

00:01:50.706 --> 00:01:52.806 align:middle
que prolonga el de Psr.

00:01:53.646 --> 00:01:55.306 align:middle
¿Cuál queremos?

00:01:55.816 --> 00:01:59.996 align:middle
El "más grande": el de Symfony\Component:

00:02:00.576 --> 00:02:06.486 align:middle
La razón es que, si nuestro decorador
de EventDispatcher va a pasar

00:02:06.486 --> 00:02:12.696 align:middle
por el sistema en lugar del real, necesita
implementar la interfaz más fuerte

00:02:12.896 --> 00:02:15.766 align:middle
la interfaz que tenga más métodos.

00:02:16.496 --> 00:02:18.856 align:middle
Ve a "Código"->"Generar" -o Command+N
en un Mac- y selecciona "Implementar

00:02:19.116 --> 00:02:23.366 align:middle
métodos" para añadir el montón
que necesitábamos. Uf ... ¡ya

00:02:24.876 --> 00:02:26.276 align:middle
está! Lo otro que

00:02:26.516 --> 00:02:29.886 align:middle
tenemos que hacer es añadir un constructor al que
se le pasará elEventDispatcherInterface interno...

00:02:29.966 --> 00:02:34.106 align:middle
y hacer que

00:02:35.046 --> 00:02:37.726 align:middle
sea una propiedad con
private readonly: Ahora que

00:02:39.506 --> 00:02:45.566 align:middle
tenemos esto, tenemos que llamar al despachador
interno en todos estos métodos. Esta parte es

00:02:46.116 --> 00:02:47.456 align:middle
sencilla.... pero aburrida. Digamos que

00:02:47.726 --> 00:02:49.036 align:middle
$this->eventDispatcher->addListener($eventName,
$listener,

00:02:49.376 --> 00:02:53.606 align:middle
$priority): También tenemos

00:02:56.416 --> 00:03:00.466 align:middle
que comprobar si el método debe devolver
un valor o no. No necesitamos devolver

00:03:00.916 --> 00:03:03.246 align:middle
en este método... pero hay

00:03:03.356 --> 00:03:09.166 align:middle
métodos aquí abajo que sí tienen valores de
retorno, como getListeners(). Para evitar pasar

00:03:10.266 --> 00:03:15.546 align:middle
los próximos 3 minutos repitiendo lo
que acabo de hacer 8 veces más y ponerte

00:03:15.776 --> 00:03:17.336 align:middle
a dormir... ¡bam! me limitaré a

00:03:17.646 --> 00:03:20.956 align:middle
pegar la versión terminada: Puedes copiar

00:03:21.576 --> 00:03:24.096 align:middle
esto desde el bloque de código de esta
página. Simplemente estamos llamando

00:03:24.646 --> 00:03:28.066 align:middle
al despachador interno en cada
método. Por último, ahora que

00:03:28.966 --> 00:03:35.786 align:middle
nuestro decorador está haciendo todo lo que debe hacer,
podemos añadir nuestras cosas personalizadas. Justo antes de

00:03:36.496 --> 00:03:41.466 align:middle
llamar al método interno dispatch(), pegaré
dos líneas dump() y también volcaré

00:03:41.986 --> 00:03:47.056 align:middle
Dispatching event, $event::class:
¡Bien! ¡ Nuestra clase decoradora

00:03:48.266 --> 00:03:51.426 align:middle
está hecha! Pero, hay

00:03:51.786 --> 00:03:59.716 align:middle
muchos lugares en Symfony que dependen del servicio
cuyo ID es event_dispatcher. Así que aquí está la

00:04:00.376 --> 00:04:07.986 align:middle
pregunta del millón: ¿cómo podemos sustituir ese servicio
por nuestro propio servicio... pero seguir obteniendo

00:04:08.226 --> 00:04:12.566 align:middle
el despachador de eventos original que
nos han pasado? Pues bien, Symfony tiene

00:04:13.236 --> 00:04:19.646 align:middle
una función creada específicamente
para esto, ¡y te va a encantar! Ve a la

00:04:20.416 --> 00:04:25.806 align:middle
parte superior de nuestra clase decoradora, añade un
atributo de PHP 8 llamado: #[AsDecorator()] y pasa el

00:04:26.306 --> 00:04:32.026 align:middle
ID del servicio que queremos decorar:
event_dispatcher: Eso es todo. ¡En serio!

00:04:32.756 --> 00:04:33.876 align:middle
Esto dice:

00:04:34.296 --> 00:04:35.096 align:middle
¡Hola

00:04:35.496 --> 00:04:37.136 align:middle
Symfony! ¡ Gracias por ser

00:04:37.506 --> 00:04:38.906 align:middle
tan genial! Además, por favor, haz me

00:04:39.296 --> 00:04:44.796 align:middle
el verdadero servicio event_dispatcher,
pero sigue autoconectando

00:04:45.166 --> 00:04:50.126 align:middle
el servicio original event_dispatcher
en mí. ¡Vamos a probarlo!

00:04:50.966 --> 00:04:51.796 align:middle
Ejecuta nuestra aplicación:

00:04:52.166 --> 00:04:55.226 align:middle
Y... ¡funciona! ¡Mira! ¡

00:04:55.596 --> 00:04:57.146 align:middle
Puedes ver

00:04:57.376 --> 00:04:59.626 align:middle
cómo se vuelca el evento! Y
también está nuestro evento

00:05:00.026 --> 00:05:01.856 align:middle
personalizado. Y al

00:05:02.456 --> 00:05:03.716 align:middle
salir... ¡otro evento en

00:05:04.096 --> 00:05:06.156 align:middle
el fondo! Acabamos de sustituir

00:05:06.706 --> 00:05:13.296 align:middle
el servicio central de event_dispatcher por el nuestro
creando una sola clase. ¡Eso es una barbaridad! ¿Podríamos

00:05:13.546 --> 00:05:14.836 align:middle
haber

00:05:15.516 --> 00:05:18.926 align:middle
utilizado antes este truco de
AsDecorator para nuestra propia

00:05:18.926 --> 00:05:22.376 align:middle
situación de decoración
deXpCalculator? ¡Sí! He aquí cómo:

00:05:22.846 --> 00:05:31.256 align:middle
En config/services.yaml, elimina los argumentos
manuales: Y cambia la interfaz para que apunte

00:05:31.256 --> 00:05:36.316 align:middle
al servicio original no decorado:
XpCalculator: Básicamente, en la

00:05:37.396 --> 00:05:41.226 align:middle
configuración del servicio, queremos
configurar las cosas de forma "normal", como

00:05:41.226 --> 00:05:44.996 align:middle
si no hubiera decoradores. Si probáramos

00:05:45.666 --> 00:05:50.946 align:middle
ahora nuestra aplicación, funcionaría, pero
no utilizaría nuestro decorador. Pero ahora,

00:05:51.226 --> 00:05:57.596 align:middle
entra en OutputtingXpCalculator
añade #[AsDecorator()] y pásale

00:05:57.896 --> 00:06:06.046 align:middle
XpCalculatorInterface::class, ya que ese es el ID
del servicio que queremos sustituir: ¡Donezo! Si

00:06:06.756 --> 00:06:11.006 align:middle
probamos esto ahora: No hay
errores. Una forma aún más rápida

00:06:11.526 --> 00:06:14.826 align:middle
de comprobar que esto funciona es
ejecutando php ./bin/console debug:container

00:06:14.826 --> 00:06:22.846 align:middle
XpCalculatorInterface
--show-arguments Y... ¡comprueba!

00:06:23.266 --> 00:06:23.916 align:middle
Dice que

00:06:24.306 --> 00:06:29.356 align:middle
se trata de un alias del servicio
OutputtingXpCalculator. Así que cualquiera que se

00:06:29.736 --> 00:06:36.466 align:middle
autocablee en esta interfaz obtendrá realmente
el servicio OutputtingXpCalculator. Y si

00:06:37.266 --> 00:06:41.526 align:middle
miras aquí abajo los argumentos, el primer
argumento que se pasa a OutputtingXpCalculator es

00:06:41.526 --> 00:06:45.976 align:middle
el verdadero XpCalculator. Es increíble Muy

00:06:46.316 --> 00:06:47.686 align:middle
bien, el patrón

00:06:48.696 --> 00:06:51.186 align:middle
decorador está hecho. ¡
Qué patrón más chulo

00:06:51.416 --> 00:06:52.796 align:middle
! Una característica

00:06:53.446 --> 00:06:57.076 align:middle
del patrón decorador que sólo
hemos mencionado es que puedes

00:06:57.076 --> 00:07:00.056 align:middle
decorar un servicio tantas
veces como quieras. ¡Sí! Si

00:07:00.676 --> 00:07:05.946 align:middle
creamos otra clase que implemente
XpCalculatorInterface y le damos

00:07:05.946 --> 00:07:12.466 align:middle
este atributo #AsDecorator(), ahora habría dos servicios
que la decorarían. ¿Qué servicio estaría en el

00:07:13.146 --> 00:07:15.566 align:middle
exterior? Si te importa

00:07:16.306 --> 00:07:21.606 align:middle
lo suficiente, podrías establecer una opción priority
en uno de los atributos para controlar eso. ¿Dónde

00:07:22.376 --> 00:07:25.126 align:middle
vemos la decoración en la
naturaleza? La respuesta

00:07:25.646 --> 00:07:26.846 align:middle
es... ¡más o menos por todas partes

00:07:27.046 --> 00:07:28.826 align:middle
! En la Plataforma API, es

00:07:29.426 --> 00:07:35.916 align:middle
habitual utilizar la decoración para ampliar los servicios
centrales como el ContextBuilder. Y el propio Symfony

00:07:36.476 --> 00:07:39.546 align:middle
utiliza la decoración con bastante frecuencia
para añadir funciones de depuración

00:07:39.546 --> 00:07:43.136 align:middle
mientras estamos en el
entorno dev. Por ejemplo,

00:07:43.716 --> 00:07:49.566 align:middle
sabemos que esta clase EventDispatcher se
utilizaría en el entorno prod. Pero en el entorno

00:07:49.876 --> 00:07:55.266 align:middle
dev - voy a pulsar t para buscar un
"TraceableEventDispatcher" - asumiendo que

00:07:55.736 --> 00:08:00.486 align:middle
tienes algunas herramientas de depuración
instaladas, esta es la clase real que representa el

00:08:00.486 --> 00:08:03.716 align:middle
servicioevent_dispatcher. ¡ Decora el

00:08:03.996 --> 00:08:05.896 align:middle
real! Puedo demostrarlo.

00:08:06.616 --> 00:08:07.296 align:middle
Vuelve a

00:08:07.666 --> 00:08:09.156 align:middle
tu terminal y ejec uta php ./bin/console
debug:container event_dispatcher

00:08:09.156 --> 00:08:18.846 align:middle
--show-arguments Desplázate hasta la
parte superior y... ¡compruébalo!

00:08:19.376 --> 00:08:20.106 align:middle
El servicio event_dispatcher

00:08:20.306 --> 00:08:26.196 align:middle
es un alias de debug.event_dispatcher...
¡cuya clase es

00:08:26.726 --> 00:08:29.536 align:middle
TraceableEventDispatcher! Y si te desplazas

00:08:30.786 --> 00:08:33.726 align:middle
hasta sus argumentos, ¡ja! Ha pasado nuestro

00:08:34.176 --> 00:08:38.986 align:middle
DebugEventDispatcherDecorator como
argumento. Sí, en este caso hay

00:08:39.676 --> 00:08:45.496 align:middle
3 despachadores de eventos: El núcleo de Symfony
TraceableEventDispatcher está en el exterior,

00:08:45.496 --> 00:08:50.106 align:middle
llama a nuestro
DebugEventDispatcherDecorator... y éste

00:08:50.316 --> 00:08:54.376 align:middle
, en última instancia, llama al despachador
de eventos real. ¡La creación! ¿Y qué

00:08:54.726 --> 00:08:55.726 align:middle
problemas

00:08:56.766 --> 00:08:59.586 align:middle
resuelve el patrón decorador?
Sencillo: nos permite

00:09:00.046 --> 00:09:06.776 align:middle
ampliar el comportamiento de una clase
existente -como XpCalculator - aunque esa

00:09:07.076 --> 00:09:11.726 align:middle
clase no contenga ningún otro punto
de ampliación. Esto significa que

00:09:12.306 --> 00:09:17.096 align:middle
podemos utilizarlo para anular los servicios del proveedor
cuando todo lo demás falla. El único inconveniente

00:09:17.486 --> 00:09:20.036 align:middle
del patrón decorador es que sólo podemos

00:09:20.036 --> 00:09:24.026 align:middle
ejecutar código antes o después del método
principal. Y el servicio que queremos decorar

00:09:24.526 --> 00:09:28.066 align:middle
debe implementar una interfaz.
Bien, equipo. ¡ Ya hemos

00:09:29.176 --> 00:09:29.716 align:middle
terminado! Hay

00:09:29.826 --> 00:09:30.926 align:middle
muchos

00:09:31.316 --> 00:09:34.036 align:middle
más patrones por ahí en la
naturaleza: ésta ha sido una

00:09:34.606 --> 00:09:37.046 align:middle
recopilación de algunos de nuestros
favoritos. Si nos hemos saltado

00:09:37.566 --> 00:09:42.456 align:middle
uno o varios de los que realmente quieres oír
hablar, ¡háznoslo saber! Hasta entonces, compr ueba

00:09:43.176 --> 00:09:46.776 align:middle
si puedes detectar estos patrones
en la naturaleza y averiguar dónde

00:09:46.776 --> 00:09:49.986 align:middle
puedes aplicarlos para limpiar tu
propio código... e impresionar a tus

00:09:50.196 --> 00:09:51.446 align:middle
amigos. Gracias por codificar conmigo,

00:09:52.376 --> 00:09:55.166 align:middle
¡y nos vemos la próxima vez!
